# Transaction manager implementation. `consensus-commit` by default.
#scalar.db.transaction_manager=consensus-commit

# Storage implementation used for Consensus Commit. `cassandra` by default.
#scalar.db.storage=cassandra

# Comma separated contact points.
scalar.db.contact_points=localhost

# Port number for all the contact points.
#scalar.db.contact_port=

# Credential information to access the database.
scalar.db.username=cassandra
scalar.db.password=cassandra

# Isolation level used for Consensus Commit. Either SNAPSHOT or SERIALIZABLE can be specified. SNAPSHOT is used by default.
#scalar.db.consensus_commit.isolation_level=

# Serializable strategy used for Consensus Commit.
# Either EXTRA_READ or EXTRA_WRITE can be specified. EXTRA_READ is used by default.
# If SNAPSHOT is specified in the property "scalar.db.consensus_commit.isolation_level", this is ignored.
#scalar.db.consensus_commit.serializable_strategy=

# This is only usable for Consensus Commit.
# If set to "true", Get and Scan operations results will contain transaction metadata. To see the transaction metadata columns details for a given table, you can use the `DistributedTransactionAdmin.getTableMetadata()`
# method which will return the table metadata augmented with the transaction metadata columns. Using this configuration can be useful to investigate transaction related issues.
# The default is false.
#scalar.db.consensus_commit.include_metadata.enabled=false

# The given namespace name will be used by operations that do not already specify a namespace.
# If you would like to use this setting with ScalarDB server, it needs to be set on the client-side configuration.
# By default, no default namespace name is set on operations.
#scalar.db.default_namespace_name=<a_namespace_name>

