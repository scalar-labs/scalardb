#!/usr/bin/env ruby

if ARGV.empty?
  raise "usage: #{$0} release_pattern release..."
end

# This argument can be a full release name (e.g., v3.9.2) or a prefix (e.g., v3.9)
release_pattern = ARGV.shift
if release_pattern.end_with?('.')
  # Remove a tailing dot if exists
  release_pattern = release_pattern[0...-1]
end
# This set of arguments consists of all existing release names
releases = ARGV

# `candidate_releases` is a map and consists of the following elements
#   key: a partial version integer (e.g., 9 out of "v3.9.1")
#   value: a next nested map for subsequent partial version integers
#
# For instance, let's say `releases` are
# - v3.8.11
# - v3.8.12
# - v3.9.9
# - v3.9.10
# - v3.10.0
# - v3.10.1
#
# If `release_pattern` is `v3`,
# `candidate_releases` will be as follows
# {
#   8: {
#     11: {},
#     12: {}
#   }
#   9: {
#     9: {},
#     10: {}
#   }
#   10: {
#     0: {},
#     1: {}
#   }
# }
#
# If `release_pattern` is `v3.9`,
# `candidate_releases` will be as follows
# {
#   9: {
#     9: {},
#     10: {}
#   }
# }
#
# And then, the latest release name can be built by picking a max partial version
# step by step (e.g., "v3.10.1" and "v3.9.10")

found = false
candidate_releases = {}
releases.each do |release|
  if release.start_with?(release_pattern)
    found = true
    # Get the rest of string after `release_pattern` (e.g., "9.1")
    rest_versions = release[release_pattern.size..]
    cur = candidate_releases
    rest_versions.split('.').each do |part_of_version_str|
      next if part_of_version_str.empty?
      part_of_version = Integer(part_of_version_str)
      # Just an idiom for map initialization
      cur[part_of_version] ||= {}
      cur = cur[part_of_version]
    end
  end
end

return unless found

cur = candidate_releases
full_release_name = release_pattern.dup
loop do
  if cur.empty?
    puts full_release_name
    return
  end
  # Always choose the max partial version integer,
  # construct the full release name and traverse the map
  part_of_version, next_versions = cur.max
  full_release_name << ".#{part_of_version}"
  cur = next_versions
end
