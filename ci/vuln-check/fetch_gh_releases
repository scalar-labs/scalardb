#!/usr/bin/env bash

set -e -o pipefail; [[ -n "$DEBUG" ]] && set -x

if [[ $# -ne 2 ]]; then
    echo "usage: $0 repo_owner repo_name"
    exit 1
fi

repo_owner=$1
repo_name=$2

# Get all GitHub releases by following subsequent pages using --paginate option
releases=$(gh api graphql --paginate -F owner=$repo_owner -F repoName=$repo_name -F endCursor="" -f query='
  query($owner: String!, $repoName: String!, $endCursor: String!) {
    repository(owner: $owner, name: $repoName) {
      releases(first: 100, after: $endCursor) {
        pageInfo {
          endCursor
          hasNextPage
        }
        nodes {
          name
        }
      }
    }
  }
')

# $releases is JSONL like the following. So extracting only `name` here makes subsequent processing simpler
#
# ```
# {"data":{"repository":{"releases":{"pageInfo":{"endCursor":"Mg","hasNextPage":true},"nodes":[{"name":"v3.10.10"},{"name":"v3.10.1"}]}}}}
# {"data":{"repository":{"releases":{"pageInfo":{"endCursor":"NA","hasNextPage":true},"nodes":[{"name":"v3.9.10"},{"name":"v3.9.9"}]}}}}
# {"data":{"repository":{"releases":{"pageInfo":{"endCursor":"Ng","hasNextPage":false},"nodes":[{"name":"v3.8.1"},{"name":"v3.8.0"}]}}}}
# ```

# Output:
#
# ```
# v3.10.10
# v3.10.1
#    :
# v3.8.0
# ```
echo $releases | jq -r -s 'map(.data.repository.releases.nodes) | flatten | map(.name)' | jq -r '.[]'
