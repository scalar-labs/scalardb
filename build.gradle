apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java-library-distribution'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTestCassandra {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/cassandra/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithCassandraIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCosmos {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/cosmos/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithCosmosIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestDynamo {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/dynamo/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithDynamoIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestJdbc {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/jdbc/*.java'
            include '**/com/scalar/db/storage/jdbc/test/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithJdbcDatabaseIntegrationTest.java'
            include '**/com/scalar/db/transaction/jdbc/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }

    integrationTestMultiStorage {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/multistorage/*.java'
            include '**/com/scalar/db/storage/jdbc/test/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithMultiStorageIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCassandraCompile.extendsFrom testCompile
    integrationTestCassandraRuntime.extendsFrom testRuntime
    integrationTestCosmosCompile.extendsFrom testCompile
    integrationTestCosmosRuntime.extendsFrom testRuntime
    integrationTestDynamoCompile.extendsFrom testCompile
    integrationTestDynamoRuntime.extendsFrom testRuntime
    integrationTestJdbcCompile.extendsFrom testCompile
    integrationTestJdbcRuntime.extendsFrom testRuntime
    integrationTestMultiStorageCompile.extendsFrom testCompile
    integrationTestMultiStorageRuntime.extendsFrom testRuntime
}

def awssdkVersion = "2.14.24"

dependencies {
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: '3.6.0'
    compile group: 'com.azure', name: 'azure-cosmos', version: '4.8.0'
    compile group: 'org.jooq', name: 'jooq', version: '3.13.2'
    compile group: 'software.amazon.awssdk', name: 'dynamodb', version: "${awssdkVersion}"
    compile group: 'software.amazon.awssdk', name:'core', version: "${awssdkVersion}"

    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.8.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.18'
    compile group: 'com.oracle.database.jdbc', name: 'ojdbc8-production', version: '19.8.0.0'
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '8.4.1.jre8'

    compile group: 'com.google.guava', name: 'guava', version: '24.1-jre'
    compile group: 'com.google.inject', name: 'guice', version: '5.0.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.16.0'
}

test {
    maxHeapSize "512m"
    testLogging.showStandardStreams = true
}

javadoc {
    options.addStringOption("notimestamp", "com.scalar.db")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

task integrationTestCassandra(type: Test) {
    description = 'Runs the integration tests for Cassandra.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCassandra.output.classesDirs
    classpath = sourceSets.integrationTestCassandra.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
}

task integrationTestCosmos(type: Test) {
    description = 'Runs the integration tests for Cosmos DB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCosmos.output.classesDirs
    classpath = sourceSets.integrationTestCosmos.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestDynamo(type: Test) {
    description = 'Runs the integration tests for DynamoDB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestDynamo.output.classesDirs
    classpath = sourceSets.integrationTestDynamo.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestJdbc(type: Test) {
    description = 'Runs the integration tests for a JDBC database.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestJdbc.output.classesDirs
    classpath = sourceSets.integrationTestJdbc.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestMultiStorage(type: Test) {
    description = 'Runs the integration tests for multi-storage.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestMultiStorage.output.classesDirs
    classpath = sourceSets.integrationTestMultiStorage.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
}

// build should not depend on the integration tests
check.dependsOn -= integrationTestCassandra
check.dependsOn -= integrationTestCosmos
check.dependsOn -= integrationTestDynamo
check.dependsOn -= integrationTestJdbc
check.dependsOn -= integrationTestMultiStorage

task copyTestJarsToTestLib(type: Copy) {
    from configurations.testCompile
    into file("$buildDir/test-libs")
}

test.dependsOn += copyTestJarsToTestLib

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.scalar-labs"
archivesBaseName = "scalardb"
//version = "3.0.0"

// for archiving and uploading to maven central
//apply from: 'archive.gradle'
