# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
workflows:
  version: 2
  build_and_tests:
    jobs:
      - build
      - integration-test-for-jdbc-mysql
      - integration-test-for-jdbc-postgresql
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      - image: cassandra:3.11
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Install cqlsh
          # We need to edit DEFAULT_CQLVER defined in the cqlsh script
          # to connect to the server without --cqlversion command line option
          command: |
            curl -O https://bootstrap.pypa.io/2.7/get-pip.py
            sudo python get-pip.py
            sudo pip install cqlsh
            sudo sed -i "s/^DEFAULT_CQLVER = .*/DEFAULT_CQLVER = '3.4.4'/" /usr/local/bin/cqlsh

      # https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: Wait for Cassandra
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://localhost:9042 -timeout 1m

      # run tests!
      - run: gradle test
      - run: gradle integrationTestCassandra

      - run:
          name: Run short verification
          command: |
            gradle jar
            gradle testJar
            cqlsh -f scripts/sample_schema/tx_transfer.cql
            # run with 2 requesters for 30 seconds
            java -cp "build/test-libs/*:build/libs/*" com.scalar.db.verification.TransactionVerification -c 2 -t 30

      - run:
          name: Save Gradle test reports
          command: |
            mkdir -p /tmp/gradle_test_reports
            cp -a build/reports/tests/test /tmp/gradle_test_reports/
          when: always

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a build/reports/tests/integrationTestCassandra /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_test_reports
          destination: gradle_test_reports

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-jdbc-mysql:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      - image: circleci/mysql:8.0.23
        environment:
          MYSQL_ROOT_PASSWORD: mysql

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url="jdbc:mysql://localhost:3306/" -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password=mysql

      # run tests with the namespace prefix!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url="jdbc:mysql://localhost:3306/" -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password=mysql -Dscalardb.namespace_prefix=ns_prefix

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a build/reports/tests/integrationTestJdbc /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-jdbc-postgresql:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      - image: circleci/postgres:9.6.9-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:postgresql://localhost:5432/ -Dscalardb.jdbc.username=postgres -Dscalardb.jdbc.password=postgres

      # run tests with the namespace prefix!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:postgresql://localhost:5432/ -Dscalardb.jdbc.username=postgres -Dscalardb.jdbc.password=postgres -Dscalardb.namespace_prefix=ns_prefix

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a build/reports/tests/integrationTestJdbc /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports
