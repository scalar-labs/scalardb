# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      - image: cassandra:3.11
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Install cqlsh
          # We need to edit DEFAULT_CQLVER defined in the cqlsh script
          # to connect to the server without --cqlversion command line option
          command: |
            curl -O https://bootstrap.pypa.io/get-pip.py
            sudo python get-pip.py
            sudo pip install cqlsh
            sudo sed -i "s/^DEFAULT_CQLVER = .*/DEFAULT_CQLVER = '3.4.4'/" /usr/local/bin/cqlsh

      - run:
          name: Create log directories
          command: |
            sudo mkdir -m 777 /var/log/scalar
            sudo mkdir -m 777 /var/log/scalar/db

      # https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: Wait for Cassandra
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://localhost:9042 -timeout 1m

      # run tests!
      - run: gradle test
      - run: gradle integrationTest

      - run:
          name: Save Gradle test reports
          command: |
            mkdir -p /tmp/gradle_test_reports
            cp -a build/reports/tests/test /tmp/gradle_test_reports/
          when: always

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a build/reports/tests/integrationTest /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_test_reports
          destination: gradle_test_reports

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports
