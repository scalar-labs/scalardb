version: 2
workflows:
  version: 2
  scalardb-ci:
    jobs:
      - check
      - integration-test-for-cassandra
      - integration-test-for-cosmos
      - integration-test-for-dynamo
      - integration-test-for-jdbc-mysql
      - integration-test-for-jdbc-postgresql
      - integration-test-for-jdbc-oracle
      - integration-test-for-jdbc-sqlserver
      - integration-test-for-multi-storage
      - integration-test-for-scalardb-server
jobs:
  check:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # run check!
      - run: gradle check

      - run:
          name: Save Gradle test reports
          command: |
            mkdir -p /tmp/gradle_test_reports
            cp -a core/build/reports/tests/test /tmp/gradle_test_reports/
          when: always

      - run:
          name: Save SpotBugs reports for core
          command: |
            mkdir -p /tmp/gradle_spotbugs_reports_for_core
            cp -a core/build/reports/spotbugs /tmp/gradle_spotbugs_reports_for_core/
          when: always

      - run:
          name: Save SpotBugs reports for server
          command: |
            mkdir -p /tmp/gradle_spotbugs_reports_for_server
            cp -a server/build/reports/spotbugs /tmp/gradle_spotbugs_reports_for_server/
          when: always

      - store_artifacts:
          path: /tmp/gradle_test_reports
          destination: gradle_test_reports

      - store_artifacts:
          path: /tmp/gradle_spotbugs_reports_for_core
          destination: gradle_spotbugs_reports_for_core

      - store_artifacts:
          path: /tmp/gradle_spotbugs_reports_for_server
          destination: gradle_spotbugs_reports_for_server

  integration-test-for-cassandra:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: cassandra:3.11
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      - run:
          name: Install cqlsh
          # We need to edit DEFAULT_CQLVER defined in the cqlsh script
          # to connect to the server without --cqlversion command line option
          command: |
            curl -O https://bootstrap.pypa.io/pip/2.7/get-pip.py
            sudo python get-pip.py
            sudo pip install cqlsh
            sudo sed -i "s/^DEFAULT_CQLVER = .*/DEFAULT_CQLVER = '3.4.4'/" /usr/local/bin/cqlsh

      # https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: Wait for Cassandra
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://localhost:9042 -timeout 1m

      # run tests!
      - run: gradle integrationTestCassandra

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestCassandra /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-cosmos:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # run tests!
      - run: gradle integrationTestCosmos -Dscalardb.cosmos.uri=${COSMOS_URI} -Dscalardb.cosmos.username=${COSMOS_USERNAME} -Dscalardb.cosmos.password=${COSMOS_PASSWORD} -Dscalardb.namespace_prefix=${CIRCLE_BUILD_NUM}

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestCosmos /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-dynamo:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: amazon/dynamodb-local:1.15.0

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # run tests!
      - run: gradle integrationTestDynamo

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestDynamo /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-jdbc-mysql:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/mysql:8.0.23
        environment:
          MYSQL_ROOT_PASSWORD: mysql

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # run tests!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url="jdbc:mysql://localhost:3306/" -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password=mysql

      # run tests with the namespace prefix!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url="jdbc:mysql://localhost:3306/" -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password=mysql -Dscalardb.namespace_prefix=ns_prefix

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestJdbc /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-jdbc-postgresql:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/postgres:9.6.9-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # run tests!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:postgresql://localhost:5432/ -Dscalardb.jdbc.username=postgres -Dscalardb.jdbc.password=postgres

      # run tests with the namespace prefix!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:postgresql://localhost:5432/ -Dscalardb.jdbc.username=postgres -Dscalardb.jdbc.password=postgres -Dscalardb.namespace_prefix=ns_prefix

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestJdbc /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-jdbc-oracle:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: ghcr.io/scalar-labs/oracle/database:18.4.0-xe
        auth:
          username: scalar-git
          password: ${SCALAR_GIT_PASSWORD}
        environment:
          ORACLE_PWD: Oracle18

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: Wait for Oracle Database to be ready
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://localhost:5500 -timeout 15m

      # run tests!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:oracle:thin:@localhost:1521/XEPDB1 -Dscalardb.jdbc.username=SYSTEM -Dscalardb.jdbc.password=Oracle18

      # run tests with the namespace prefix!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:oracle:thin:@localhost:1521/XEPDB1 -Dscalardb.jdbc.username=SYSTEM -Dscalardb.jdbc.password=Oracle18 -Dscalardb.namespace_prefix=ns_prefix

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestJdbc /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-jdbc-sqlserver:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: mcr.microsoft.com/mssql/server:2019-latest
        environment:
          MSSQL_PID: "Express"
          SA_PASSWORD: "SqlServer19"
          ACCEPT_EULA: "Y"

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      # run tests!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:sqlserver://localhost:1433 -Dscalardb.jdbc.username=sa -Dscalardb.jdbc.password=SqlServer19

      # run tests with the namespace prefix!
      - run: gradle integrationTestJdbc -Dscalardb.jdbc.url=jdbc:sqlserver://localhost:1433 -Dscalardb.jdbc.username=sa -Dscalardb.jdbc.password=SqlServer19 -Dscalardb.namespace_prefix=ns_prefix

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestJdbc /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-multi-storage:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: cassandra:3.11
        environment:
          MAX_HEAP_SIZE: 2048m
          HEAP_NEWSIZE: 512m
      - image: circleci/mysql:8.0.23
        environment:
          MYSQL_ROOT_PASSWORD: mysql

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "core/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "core/build.gradle" }}

      - run:
          name: Install cqlsh
          # We need to edit DEFAULT_CQLVER defined in the cqlsh script
          # to connect to the server without --cqlversion command line option
          command: |
            curl -O https://bootstrap.pypa.io/pip/2.7/get-pip.py
            sudo python get-pip.py
            sudo pip install cqlsh
            sudo sed -i "s/^DEFAULT_CQLVER = .*/DEFAULT_CQLVER = '3.4.4'/" /usr/local/bin/cqlsh

      # https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: Wait for Cassandra
          # dockerize command is included in circleci/openjdk:8-jdk image
          command: dockerize -wait tcp://localhost:9042 -timeout 1m

      # run tests!
      - run: gradle integrationTestMultiStorage

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a core/build/reports/tests/integrationTestMultiStorage /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports

  integration-test-for-scalardb-server:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/mysql:8.0.23
        environment:
          MYSQL_ROOT_PASSWORD: mysql

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "server/build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "server/build.gradle" }}

      # run tests!
      - run: gradle integrationTestScalarDbServer

      - run:
          name: Save Gradle integration test reports
          command: |
            mkdir -p /tmp/gradle_integration_test_reports
            cp -a server/build/reports/tests/integrationTestScalarDbServer /tmp/gradle_integration_test_reports/
          when: always

      - store_artifacts:
          path: /tmp/gradle_integration_test_reports
          destination: gradle_integration_test_reports
