plugins {
    id 'application'
    id 'com.palantir.docker' version '0.25.0'
    id 'com.github.spotbugs' version '4.7.1'
    id 'net.ltgt.errorprone' version '2.0.2'
}

sourceSets {
    integrationTestScalarDbServer {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestScalarDbServerImplementation.extendsFrom testImplementation
    integrationTestScalarDbServerRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestScalarDbServerCompileOnly.extendsFrom testCompileOnly
}

evaluationDependsOn ':core'

dependencies {
    implementation project(':core')
    implementation project(':rpc')
    implementation group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
    implementation group: 'com.google.inject', name: 'guice', version: "${guiceVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4jVersion}"
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: "${protobufVersion}"
    implementation group: 'info.picocli', name: 'picocli', version: "${picocliVersion}"
    implementation(group: 'com.scalar-labs', name: 'scalar-admin', version: "${scalarAdminVersion}") {
        exclude group: 'io.grpc'
        exclude group: 'org.slf4j'
    }
    implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: "${dropwizardMetricsVersion}"
    implementation group: 'io.dropwizard.metrics', name: 'metrics-jmx', version: "${dropwizardMetricsVersion}"
    implementation group: 'io.prometheus', name: 'simpleclient_dropwizard', version: "${prometheusVersion}"
    implementation group: 'io.prometheus', name: 'simpleclient_servlet', version: "${prometheusVersion}"
    implementation group: 'io.prometheus', name: 'simpleclient_hotspot', version: "${prometheusVersion}"
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: "${jettyVersion}"
    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: "${mockitoVersion}"
    integrationTestScalarDbServerImplementation project(':core').sourceSets.integrationTestAll.output
    // for SpotBugs
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "Scalar DB Server"
}

application {
    mainClassName = 'com.scalar.db.server.ScalarDbServer'
    startScripts.applicationName = 'scalardb-server'
}

docker {
    name "ghcr.io/scalar-labs/scalardb-server:${project.version}"
    files tasks.distTar.outputs, 'conf/log4j2.properties', 'conf/database.properties.tmpl', 'docker-entrypoint.sh'
}

task integrationTestScalarDbServer(type: Test) {
    description = 'Runs the integration tests for the Scalar DB server.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestScalarDbServer.output.classesDirs
    classpath = sourceSets.integrationTestScalarDbServer.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}

spotbugsMain.reports {
    html.enabled = true
}

spotbugsTest.reports {
    html.enabled = true
}

spotbugsIntegrationTestScalarDbServer.reports {
    html.enabled = true
}

archivesBaseName = "scalardb-server"

// for release
distZip {
    archiveFileName = "${archivesBaseName}-${project.version}.zip"
}

// for docker
distTar {
    archiveFileName = "${project.name}.tar"
}

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
        (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
                project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
