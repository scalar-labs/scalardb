plugins {
    id 'application'
    id 'com.palantir.docker' version "${dockerPluginVersion}"
    id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
    id 'net.ltgt.errorprone' version "${errorpronePluginVersion}"
}

sourceSets {
    integrationTestScalarDbServer {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestScalarDbServerImplementation.extendsFrom testImplementation
    integrationTestScalarDbServerRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestScalarDbServerCompileOnly.extendsFrom testCompileOnly
}

dependencies {
    implementation project(':core')
    implementation project(':rpc')
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "info.picocli:picocli:${picocliVersion}"
    implementation("com.scalar-labs:scalar-admin:${scalarAdminVersion}") {
        exclude group: 'io.grpc'
        exclude group: 'org.slf4j'
    }
    implementation "io.dropwizard.metrics:metrics-core:${dropwizardMetricsVersion}"
    implementation "io.dropwizard.metrics:metrics-jmx:${dropwizardMetricsVersion}"
    implementation "io.prometheus:simpleclient_dropwizard:${prometheusVersion}"
    implementation "io.prometheus:simpleclient_servlet:${prometheusVersion}"
    implementation "io.prometheus:simpleclient_hotspot:${prometheusVersion}"
    implementation "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    integrationTestScalarDbServerImplementation project(':integration-test')
    integrationTestScalarDbServerImplementation "org.apache.commons:commons-dbcp2:${commonsDbcp2Version}"

    // for SpotBugs
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"

    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "ScalarDB Server"
}

application {
    mainClassName = 'com.scalar.db.server.ScalarDbServer'
    startScripts.applicationName = 'scalardb-server'
}

docker {
    name "ghcr.io/scalar-labs/scalardb-server:${project.version}"
    files tasks.distTar.outputs, 'conf/log4j2.properties', 'conf/database.properties', 'docker-entrypoint.sh'
}

task dockerfileLint(type: Exec) {
    description 'Lint the Dockerfile'
    commandLine "${project.rootDir}/ci/dockerfile_lint.sh"
}

task integrationTestScalarDbServer(type: Test) {
    useJUnitPlatform()
    description = 'Runs the integration tests for the ScalarDB Server.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestScalarDbServer.output.classesDirs
    classpath = sourceSets.integrationTestScalarDbServer.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat(googleJavaFormatVersion)
    }
}

spotbugsMain.reports {
    html.enabled = true
}
spotbugsMain.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

spotbugsTest.reports {
    html.enabled = true
}
spotbugsTest.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

spotbugsIntegrationTestScalarDbServer.reports {
    html.enabled = true
}
spotbugsIntegrationTestScalarDbServer.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

archivesBaseName = "scalardb-server"

// for release
distZip {
    archiveFileName = "${archivesBaseName}-${project.version}.zip"
}

// for docker
distTar {
    archiveFileName = "${project.name}.tar"
}

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
        (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
                project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
