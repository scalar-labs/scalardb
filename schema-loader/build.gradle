plugins {
    id 'java'
    id 'com.palantir.docker' version '0.25.0'
    id 'net.ltgt.errorprone' version '2.0.2'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.github.spotbugs-base' version '4.7.1'
}

archivesBaseName = "scalardb-schema-loader"

configurations {
    integrationTestAllImplementation.extendsFrom testImplementation
    integrationTestAllRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestAllCompileOnly.extendsFrom testCompileOnly
    integrationTestCassandraImplementation.extendsFrom testImplementation
    integrationTestCassandraRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCassandraCompileOnly.extendsFrom testCompileOnly
    integrationTestCosmosImplementation.extendsFrom testImplementation
    integrationTestCosmosRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCosmosCompileOnly.extendsFrom testCompileOnly
    integrationTestDynamoImplementation.extendsFrom testImplementation
    integrationTestDynamoRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestDynamoCompileOnly.extendsFrom testCompileOnly
    integrationTestJdbcImplementation.extendsFrom testImplementation
    integrationTestJdbcRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestJdbcCompileOnly.extendsFrom testCompileOnly
}

sourceSets {
    integrationTestAll {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCassandra {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/cassandra/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCosmos {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/cosmos/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestDynamo {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/dynamo/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestJdbc {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/jdbc/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    implementation project(':core')

    implementation group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
    implementation group: 'com.google.code.gson', name: 'gson', version: "${gsonVersion}"
    implementation group: 'info.picocli', name: 'picocli', version: "${picoCliVersion}"

    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: "${mockitoVersion}"
    testImplementation project(':core').sourceSets.integrationTestAll.output

    // for SpotBugs
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "Scalar DB Schema Loader"
}

docker {
    dependsOn(shadowJar)
    name "ghcr.io/scalar-labs/scalardb-schema-loader:${project.version}"
    files tasks.shadowJar.outputs
}

// Build a fat jar
shadowJar {
    archiveClassifier.set("")
    manifest {
        attributes 'Main-Class': 'com.scalar.db.schemaloader.SchemaLoader'
    }
    mergeServiceFiles()
}

task shadowJarUnversioning(type: Copy) {
    from shadowJar
    into '.'
    rename { String fileName ->
        fileName.replace("-$project.version", "")
    }
}

task integrationTestCassandra(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for Cassandra.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCassandra.output.classesDirs
    classpath = sourceSets.integrationTestCassandra.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestCosmos(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for Cosmos DB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCosmos.output.classesDirs
    classpath = sourceSets.integrationTestCosmos.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestDynamo(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for DynamoDB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestDynamo.output.classesDirs
    classpath = sourceSets.integrationTestDynamo.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestJdbc(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for a JDBC database.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestJdbc.output.classesDirs
    classpath = sourceSets.integrationTestJdbc.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}

import com.github.spotbugs.snom.SpotBugsTask

task spotbugsMain(type: SpotBugsTask) {
    dependsOn 'classes'
    classDirs = sourceSets.main.output
    sourceDirs = sourceSets.main.allSource.sourceDirectories
    auxClassPaths = sourceSets.main.compileClasspath
    reports { html.enabled = true }
}

task spotbugsTest(type: SpotBugsTask) {
    dependsOn 'testClasses'
    classDirs = sourceSets.test.output
    sourceDirs = sourceSets.test.allSource.sourceDirectories
    auxClassPaths = sourceSets.test.compileClasspath
    reports { html.enabled = true }
}

task spotbugsIntegrationTest(type: SpotBugsTask) {
    dependsOn 'integrationTestAllClasses'
    classDirs = sourceSets.integrationTestAll.output
    sourceDirs = sourceSets.integrationTestAll.allSource.sourceDirectories
    auxClassPaths = sourceSets.integrationTestAll.compileClasspath
    reports { html.enabled = true }
}


check.dependsOn += spotbugsMain
check.dependsOn += spotbugsTest
check.dependsOn += spotbugsIntegrationTest

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
        (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
                project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
