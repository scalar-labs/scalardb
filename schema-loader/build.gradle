plugins {
    id 'com.palantir.docker' version "${dockerPluginVersion}"
    id 'net.ltgt.errorprone' version "${errorpronePluginVersion}"
    id 'com.github.johnrengelman.shadow' version "${shadowPluginVersion}"
    id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
}

archivesBaseName = "scalardb-schema-loader"

dependencies {
    implementation project(':core')
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "info.picocli:picocli:${picocliVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"

    // for SpotBugs
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"

    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "ScalarDB Schema Loader"
}

docker {
    dependsOn shadowJar
    name "ghcr.io/scalar-labs/scalardb-schema-loader:${project.version}"
    files tasks.shadowJar.outputs
}

task dockerfileLint(type: Exec) {
    description 'Lint the Dockerfile'
    commandLine "${project.rootDir}/ci/dockerfile_lint.sh"
}

// Build a fat jar
shadowJar {
    archiveClassifier.set("")
    manifest {
        attributes 'Main-Class': 'com.scalar.db.schemaloader.SchemaLoader'
    }
    mergeServiceFiles()
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat(googleJavaFormatVersion)
    }
}

spotbugsMain.reports {
    html.enabled = true
}
spotbugsMain.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

spotbugsTest.reports {
    html.enabled = true
}
spotbugsTest.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
        (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
                project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    // not to publish the fat jar
    project.gradle.startParameter.excludedTaskNames = ["shadowJar"]
    apply from: 'archive.gradle'
}
