plugins {
    id 'java'
    id 'com.github.spotbugs' version '4.7.1'
    id 'net.ltgt.errorprone' version '2.0.2'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

archivesBaseName = "scalardb-schema-loader"

configurations {
    integrationTestSchemaLoaderImplementation.extendsFrom testImplementation
    integrationTestSchemaLoaderRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestSchemaLoaderCompileOnly.extendsFrom testCompileOnly
    integrationTestSchemaLoaderCassandraImplementation.extendsFrom testImplementation
    integrationTestSchemaLoaderCassandraRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestSchemaLoaderCassandraCompileOnly.extendsFrom testCompileOnly
    integrationTestSchemaLoaderCosmosImplementation.extendsFrom testImplementation
    integrationTestSchemaLoaderCosmosRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestSchemaLoaderCosmosCompileOnly.extendsFrom testCompileOnly
    integrationTestSchemaLoaderDynamoImplementation.extendsFrom testImplementation
    integrationTestSchemaLoaderDynamoRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestSchemaLoaderDynamoCompileOnly.extendsFrom testCompileOnly
    integrationTestSchemaLoaderJdbcImplementation.extendsFrom testImplementation
    integrationTestSchemaLoaderJdbcRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestSchemaLoaderJdbcCompileOnly.extendsFrom testCompileOnly
}

sourceSets {
    integrationTestSchemaLoader {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestSchemaLoaderCassandra {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/cassandra/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestSchemaLoaderCosmos {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/cosmos/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestSchemaLoaderDynamo {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/dynamo/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestSchemaLoaderJdbc {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/schemaloader/*.java'
            include '**/com/scalar/db/schemaloader/jdbc/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    implementation project(':core')

    implementation group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
    implementation group: 'com.google.code.gson', name: 'gson', version: "${gsonVersion}"
    implementation group: 'info.picocli', name: 'picocli', version: "${picoCliVersion}"

    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: "${mockitoVersion}"
<<<<<<< HEAD
    testImplementation project(':core').sourceSets.integrationTestAll.output
=======
>>>>>>> d6011d67a550e1b6e61edd4796a5a66c66f24166

    // for SpotBugs
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

// Build a fat jar
shadowJar {
    archiveClassifier.set("")
    manifest {
        attributes 'Main-Class': 'com.scalar.db.schemaloader.SchemaLoader'
    }
}

task shadowJarUnversioning(type: Copy) {
    from shadowJar
    into '.'
    rename { String fileName ->
        fileName.replace("-$project.version", "")
    }
}

task integrationTestSchemaLoaderCassandra(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for Cassandra.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestSchemaLoaderCassandra.output.classesDirs
    classpath = sourceSets.integrationTestSchemaLoaderCassandra.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestSchemaLoaderCosmos(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for Cosmos DB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestSchemaLoaderCosmos.output.classesDirs
    classpath = sourceSets.integrationTestSchemaLoaderCosmos.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestSchemaLoaderDynamo(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for DynamoDB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestSchemaLoaderDynamo.output.classesDirs
    classpath = sourceSets.integrationTestSchemaLoaderDynamo.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestSchemaLoaderJdbc(type: Test) {
    dependsOn(shadowJarUnversioning)
    description = 'Runs the schema loader integration tests for a JDBC database.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestSchemaLoaderJdbc.output.classesDirs
    classpath = sourceSets.integrationTestSchemaLoaderJdbc.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}

spotbugsMain.reports {
    html.enabled = true
}

spotbugsTest.reports {
    html.enabled = true
}

// for docker
distTar {
    archiveFileName = "${project.name}.tar"
}
