name: CI
run-name: "${{ github.event_name == 'workflow_dispatch' && format('Dispatch : Run integration test with JDK {0} ({1})', inputs.INT_TEST_JAVA_RUNTIME_VERSION, inputs.INT_TEST_JAVA_RUNTIME_VENDOR) || '' }}"

on:
  pull_request:
  workflow_dispatch:
    inputs:
      INT_TEST_JAVA_RUNTIME_VERSION:
        description: JDK version used to run the integration test
        type: choice
        required: false
        default: '8'
        options:
          - '8'
          - '11'
          - '17'
          - '21'
      INT_TEST_JAVA_RUNTIME_VENDOR:
        description: Vendor of the JDK used to run the integration test
        type: choice
        required: false
        default: 'temurin'
        options:
          - 'corretto'
          - 'microsoft'
          - 'oracle'
          - 'temurin'

env:
  TERM: dumb
  JAVA_VERSION: '8'
  JAVA_VENDOR: 'temurin'
  INT_TEST_JAVA_RUNTIME_VERSION: "${{ github.event_name != 'workflow_dispatch' && '8' || inputs.INT_TEST_JAVA_RUNTIME_VERSION }}"
  INT_TEST_JAVA_RUNTIME_VENDOR: "${{ github.event_name != 'workflow_dispatch' && 'temurin' || inputs.INT_TEST_JAVA_RUNTIME_VENDOR }}"
  # Gradle will parse 'ORG_GRADLE_PROJECT_<project_property_name>' environment variables as project properties.
  # The following variables configure the 'com.scalar.db.jdk-configuration' Gradle plugin.
  ORG_GRADLE_PROJECT_javaVersion: '8'
  ORG_GRADLE_PROJECT_javaVendor: 'temurin'
  ORG_GRADLE_PROJECT_integrationTestJavaRuntimeVersion: "${{ github.event_name != 'workflow_dispatch' && '8' || inputs.INT_TEST_JAVA_RUNTIME_VERSION }}"
  ORG_GRADLE_PROJECT_integrationTestJavaRuntimeVendor: "${{ github.event_name != 'workflow_dispatch' && 'temurin' || inputs.INT_TEST_JAVA_RUNTIME_VENDOR }}"
  # This variable evaluates to: if {!(Temurin JDK 8) && !(Oracle JDK)} then {true} else {false}
  # Oracle JDK that are linux compatible and publicly available through direct download exist for all LTS versions
  SET_UP_INT_TEST_RUNTIME_NON_ORACLE_JDK: "${{ (github.event_name == 'workflow_dispatch' && !(inputs.INT_TEST_JAVA_RUNTIME_VERSION == '8' && inputs.INT_TEST_JAVA_RUNTIME_VENDOR == 'temurin') && !(inputs.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle')) && 'true' || 'false' }}"
  INT_TEST_GRADLE_OPTIONS_FOR_GROUP_COMMIT: '"-Dscalardb.consensus_commit.coordinator.group_commit.enabled=true" "-Dscalardb.consensus_commit.coordinator.group_commit.old_group_abort_timeout_millis=15000" --tests "**.ConsensusCommit**"'

jobs:


  integration-test-for-tidb-6-5:
    name: TiDB 6.5 integration test (${{ matrix.mode.label }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        mode:
          - label: default
            group_commit_enabled: false
          - label: with_group_commit
            group_commit_enabled: true

    steps:
      - name: Install TiUP
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
          echo "$HOME/.tiup/bin" >> $GITHUB_PATH

      - name: Start TiDB with TiUP Playground
        timeout-minutes: 3
        run: |
          tiup playground v6.5 --db 1 --pd 1 --kv 1 --tiflash 0 --without-monitor > tiup.log 2>&1 &
          # Check if TiDB is running
          while true; do
            if mysql -h 127.0.0.1 -P 4000 -u root -e "SELECT 1" > /dev/null 2>&1; then
              echo "TiDB is ready"
              break
            fi
            echo "Waiting for TiDB to be ready..."
            sleep 5
          done

      - uses: actions/checkout@v5

      - name: Set up JDK ${{ env.JAVA_VERSION }} (${{ env.JAVA_VENDOR }})
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_VENDOR }}

      - name: Set up JDK ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }} (${{ env.INT_TEST_JAVA_RUNTIME_VENDOR }}) to run integration test
        uses: actions/setup-java@v5
        if: ${{ env.SET_UP_INT_TEST_RUNTIME_NON_ORACLE_JDK == 'true'}}
        with:
          java-version: ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }}
          distribution: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR }}

      - name: Login to Oracle container registry
        uses: docker/login-action@v3
        if: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle' }}
        with:
          registry: container-registry.oracle.com
          username: ${{ secrets.OCR_USERNAME }}
          password: ${{ secrets.OCR_TOKEN }}

      - name: Set up JDK ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }} (oracle) to run the integration test
        if: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle' }}
        run: |
          container_id=$(docker create "container-registry.oracle.com/java/jdk:${{ env.INT_TEST_JAVA_RUNTIME_VERSION }}")
          docker cp -L "$container_id:/usr/java/default" /usr/lib/jvm/oracle-jdk && docker rm "$container_id"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Execute Gradle 'integrationTestJdbc' task
        run: ./gradlew integrationTestJdbc -Dscalardb.jdbc.url=jdbc:mysql://localhost:4000 -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password= -Dscalardb.jdbc.isolation_level=REPEATABLE_READ ${{ matrix.mode.group_commit_enabled && env.INT_TEST_GRADLE_OPTIONS_FOR_GROUP_COMMIT || '' }}

      - name: Upload Gradle test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tidb_6_5_integration_test_reports_${{ matrix.mode.label }}
          path: core/build/reports/tests/integrationTestJdbc

  integration-test-for-tidb-v7-5:
    name: TiDB 7.5 integration test (${{ matrix.mode.label }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        mode:
          - label: default
            group_commit_enabled: false
          - label: with_group_commit
            group_commit_enabled: true

    steps:
      - name: Install TiUP
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
          echo "$HOME/.tiup/bin" >> $GITHUB_PATH

      - name: Start TiDB with TiUP Playground
        timeout-minutes: 3
        run: |
          tiup playground v7.5 --db 1 --pd 1 --kv 1 --tiflash 0 --without-monitor > tiup.log 2>&1 &
          # Check if TiDB is running
          while true; do
            if mysql -h 127.0.0.1 -P 4000 -u root -e "SELECT 1" > /dev/null 2>&1; then
              echo "TiDB is ready"
              break
            fi
            echo "Waiting for TiDB to be ready..."
            sleep 5
          done

      - uses: actions/checkout@v5

      - name: Set up JDK ${{ env.JAVA_VERSION }} (${{ env.JAVA_VENDOR }})
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_VENDOR }}

      - name: Set up JDK ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }} (${{ env.INT_TEST_JAVA_RUNTIME_VENDOR }}) to run integration test
        uses: actions/setup-java@v5
        if: ${{ env.SET_UP_INT_TEST_RUNTIME_NON_ORACLE_JDK == 'true'}}
        with:
          java-version: ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }}
          distribution: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR }}

      - name: Login to Oracle container registry
        uses: docker/login-action@v3
        if: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle' }}
        with:
          registry: container-registry.oracle.com
          username: ${{ secrets.OCR_USERNAME }}
          password: ${{ secrets.OCR_TOKEN }}

      - name: Set up JDK ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }} (oracle) to run the integration test
        if: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle' }}
        run: |
          container_id=$(docker create "container-registry.oracle.com/java/jdk:${{ env.INT_TEST_JAVA_RUNTIME_VERSION }}")
          docker cp -L "$container_id:/usr/java/default" /usr/lib/jvm/oracle-jdk && docker rm "$container_id"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Execute Gradle 'integrationTestJdbc' task
        run: ./gradlew integrationTestJdbc -Dscalardb.jdbc.url=jdbc:mysql://localhost:4000 -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password= -Dscalardb.jdbc.isolation_level=REPEATABLE_READ ${{ matrix.mode.group_commit_enabled && env.INT_TEST_GRADLE_OPTIONS_FOR_GROUP_COMMIT || '' }}

      - name: Upload Gradle test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tidb_7_5_integration_test_reports_${{ matrix.mode.label }}
          path: core/build/reports/tests/integrationTestJdbc

  integration-test-for-tidb-v8-5:
    name: TiDB 8.5 integration test (${{ matrix.mode.label }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        mode:
          - label: default
            group_commit_enabled: false
          - label: with_group_commit
            group_commit_enabled: true

    steps:
      - name: Install TiUP
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
          echo "$HOME/.tiup/bin" >> $GITHUB_PATH

      - name: Start TiDB with TiUP Playground
        timeout-minutes: 3
        run: |
          tiup playground v8.5 --db 1 --pd 1 --kv 1 --tiflash 0 --without-monitor > tiup.log 2>&1 &
          # Check if TiDB is running
          while true; do
            if mysql -h 127.0.0.1 -P 4000 -u root -e "SELECT 1" > /dev/null 2>&1; then
              echo "TiDB is ready"
              break
            fi
            echo "Waiting for TiDB to be ready..."
            sleep 5
          done

      - uses: actions/checkout@v5

      - name: Set up JDK ${{ env.JAVA_VERSION }} (${{ env.JAVA_VENDOR }})
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_VENDOR }}

      - name: Set up JDK ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }} (${{ env.INT_TEST_JAVA_RUNTIME_VENDOR }}) to run integration test
        uses: actions/setup-java@v5
        if: ${{ env.SET_UP_INT_TEST_RUNTIME_NON_ORACLE_JDK == 'true'}}
        with:
          java-version: ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }}
          distribution: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR }}

      - name: Login to Oracle container registry
        uses: docker/login-action@v3
        if: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle' }}
        with:
          registry: container-registry.oracle.com
          username: ${{ secrets.OCR_USERNAME }}
          password: ${{ secrets.OCR_TOKEN }}

      - name: Set up JDK ${{ env.INT_TEST_JAVA_RUNTIME_VERSION }} (oracle) to run the integration test
        if: ${{ env.INT_TEST_JAVA_RUNTIME_VENDOR == 'oracle' }}
        run: |
          container_id=$(docker create "container-registry.oracle.com/java/jdk:${{ env.INT_TEST_JAVA_RUNTIME_VERSION }}")
          docker cp -L "$container_id:/usr/java/default" /usr/lib/jvm/oracle-jdk && docker rm "$container_id"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Execute Gradle 'integrationTestJdbc' task
        run: ./gradlew integrationTestJdbc -Dscalardb.jdbc.url=jdbc:mysql://localhost:4000 -Dscalardb.jdbc.username=root -Dscalardb.jdbc.password= -Dscalardb.jdbc.isolation_level=REPEATABLE_READ ${{ matrix.mode.group_commit_enabled && env.INT_TEST_GRADLE_OPTIONS_FOR_GROUP_COMMIT || '' }}

      - name: Upload Gradle test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tidb_8_5_integration_test_reports_${{ matrix.mode.label }}
          path: core/build/reports/tests/integrationTestJdbc

