name: Upload artifacts

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      CR_PAT:
        required: true
      ACR_LOGIN_SERVER:
        required: true
      ACR_USER:
        required: true
      ACR_PASSWORD:
        required: true
      AWS_MARKETPLACE_ROLE_OIDC:
        required: true
      AWS_MARKETPLACE_ECR_ID:
        required: true
      MAVEN_CENTRAL_USERNAME:
        required: true
      MAVEN_CENTRAL_PASSWORD:
        required: true
      MAVEN_CENTRAL_GPG_PASSPHRASE:
        required: true
      MAVEN_CENTRAL_GPG_PUBLIC_KEY:
        required: true
      MAVEN_CENTRAL_GPG_SECRET_KEY:
        required: true

jobs:
  upload-artifacts:
    runs-on: ubuntu-latest

    steps:
      - name: Set version
        id: version
        run: |
          VERSION=$(echo ${{ github.ref }} | sed -e "s#refs/tags/v##g")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          MINOR_VERSION=$(echo ${{ github.ref }} | sed -e "s#refs/tags/v##g" | grep -o -E "^[0-9]+\.[0-9]+")
          echo "minor_version=${MINOR_VERSION}" >> $GITHUB_OUTPUT
          LATEST_VERSION=$(curl -s -u "${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/scalar-labs/scalardb/tags | jq -r .[].name | sort --version-sort -r | head -n 1 | sed -e "s#v##g")
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Prepare artifacts in staging-deploy directories
        run: ./gradlew publish

      - name: Upload artifacts to Maven Central Repository
        env:
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.MAVEN_CENTRAL_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_CENTRAL_GPG_SECRET_KEY }}
        run: ./gradlew jreleaserDeploy

      - name: Upload JReleaser outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            build/jreleaser/trace.log
            build/jreleaser/output.properties

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_MARKETPLACE_ROLE_OIDC }}
          aws-region: us-east-1

      - name: Login to Amazon Elastic Container Registry
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_MARKETPLACE_ECR_ID }}

      - name: Create containers
        run: ./gradlew docker

      - name: Push containers
        run: |
          docker push ghcr.io/scalar-labs/scalardb-server:${{ steps.version.outputs.version }}
          docker push ghcr.io/scalar-labs/scalardb-schema-loader:${{ steps.version.outputs.version }}

      - name: Push containers to Azure Container Registry
        run: |
          docker tag ghcr.io/scalar-labs/scalardb-server:${{ steps.version.outputs.version }} ${{ secrets.ACR_LOGIN_SERVER }}/scalardb-server:${{ steps.version.outputs.version }}
          docker tag ghcr.io/scalar-labs/scalardb-server:${{ steps.version.outputs.version }} ${{ secrets.ACR_LOGIN_SERVER }}/scalardb-server:${{ steps.version.outputs.minor_version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/scalardb-server:${{ steps.version.outputs.version }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/scalardb-server:${{ steps.version.outputs.minor_version }}

      # Push the latest tag image since it is required from the perspective of the specification of Azure Marketplace.
      - name: Push latest tag to Azure Container Registry
        if: ${{ steps.version.outputs.version == steps.version.outputs.latest_version }}
        run: |
          docker tag ghcr.io/scalar-labs/scalardb-server:${{ steps.version.outputs.version }} ${{ secrets.ACR_LOGIN_SERVER }}/scalardb-server:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/scalardb-server:latest

      # Push the patch version image only since AWS Marketplace restricts using the latest tag.
      - name: Push containers to Amazon Elastic Container Registry
        run: |
          docker tag ghcr.io/scalar-labs/scalardb-server:${{ steps.version.outputs.version }} ${{ secrets.AWS_MARKETPLACE_ECR_ID }}.dkr.ecr.us-east-1.amazonaws.com/scalar/scalardb-server:${{ steps.version.outputs.version }}
          docker push ${{ secrets.AWS_MARKETPLACE_ECR_ID }}.dkr.ecr.us-east-1.amazonaws.com/scalar/scalardb-server:${{ steps.version.outputs.version }}
