plugins {
    id 'net.ltgt.errorprone' version "${errorpronePluginVersion}"
    id 'com.github.johnrengelman.shadow' version "${shadowPluginVersion}"
    id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
    id 'application'
}
sourceSets {
    integrationTestAll {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestAllImplementation.extendsFrom testImplementation
    integrationTestAllImplementation.extendsFrom testRuntimeOnly
    integrationTestAllCompileOnly.extendsFrom testCompileOnly
}

application {
    mainClass = 'com.scalar.db.dataloader.cli.DataLoaderCli'
}

base {
    archivesName = "scalardb-data-loader-cli"
}

dependencies {
    implementation project(':core')
    implementation project(':data-loader:data-loader-core')
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    implementation "info.picocli:picocli:${picocliVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"

    // for SpotBugs
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testImplementation "org.testcontainers:testcontainers:1.20.4"
    testImplementation "org.testcontainers:postgresql:1.20.4"
    testImplementation "org.testcontainers:mysql:1.20.4"
    testImplementation "org.testcontainers:cassandra:1.20.4"
    testImplementation "com.datastax.cassandra:cassandra-driver-core:3.11.2"


    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "ScalarDB Data Loader CLI"
}

// Build a fat jar
shadowJar {
    archiveClassifier.set("")
    manifest {
        attributes 'Main-Class': 'com.scalar.db.dataloader.DataLoaderCli'
    }
    mergeServiceFiles()
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat(googleJavaFormatVersion)
    }
}

spotbugsMain.reports {
    html.enabled = true
}
spotbugsMain.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

spotbugsTest.reports {
    html.enabled = true
}
spotbugsTest.excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")

task dockerfileLint(type: Exec) {
    description 'Lint the Dockerfile'
    commandLine "${project.rootDir}/ci/dockerfile_lint.sh"
}

task copyFilesToDockerBuildContextDir(type: Copy) {
    description 'Copy files to a temporary folder to build the Docker image'
    dependsOn shadowJar
    from("Dockerfile")
    from(tasks.shadowJar.archiveFile)
    into('build/docker')
}

task docker(type: Exec) {
    description 'Build ScalarDB Data Loader Docker image'
    dependsOn copyFilesToDockerBuildContextDir
    workingDir 'build/docker'
    commandLine 'docker', 'build', "--tag=ghcr.io/scalar-labs/scalardb-data-loader:${project.version}", "."
}
