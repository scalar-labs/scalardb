plugins {
    id 'com.github.spotbugs-base' version '4.7.1'
    id 'net.ltgt.errorprone' version '2.0.2'
}

sourceSets {
    integrationTestAll {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCassandra {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/cassandra/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithCassandraIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCosmos {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/cosmos/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithCosmosIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestDynamo {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/dynamo/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithDynamoIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestJdbc {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/*.java'
            include '**/com/scalar/db/storage/jdbc/*.java'
            include '**/com/scalar/db/storage/jdbc/test/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithJdbcDatabaseIntegrationTest.java'
            include '**/com/scalar/db/transaction/jdbc/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestMultiStorage {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/multistorage/*.java'
            include '**/com/scalar/db/storage/jdbc/test/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitIntegrationTestBase.java'
            include '**/com/scalar/db/transaction/consensuscommit/ConsensusCommitWithMultiStorageIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestTwoPhaseConsesnsusCommit {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/storage/jdbc/test/*.java'
            include '**/com/scalar/db/transaction/consensuscommit/TwoPhaseConsensusCommitIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestAllImplementation.extendsFrom testImplementation
    integrationTestAllRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestAllCompileOnly.extendsFrom testCompileOnly
    integrationTestCassandraImplementation.extendsFrom testImplementation
    integrationTestCassandraRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCassandraCompileOnly.extendsFrom testCompileOnly
    integrationTestCosmosImplementation.extendsFrom testImplementation
    integrationTestCosmosRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCosmosCompileOnly.extendsFrom testCompileOnly
    integrationTestDynamoImplementation.extendsFrom testImplementation
    integrationTestDynamoRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestDynamoCompileOnly.extendsFrom testCompileOnly
    integrationTestJdbcImplementation.extendsFrom testImplementation
    integrationTestJdbcRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestJdbcCompileOnly.extendsFrom testCompileOnly
    integrationTestMultiStorageImplementation.extendsFrom testImplementation
    integrationTestMultiStorageRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestMultiStorageCompileOnly.extendsFrom testCompileOnly
    integrationTestTwoPhaseConsesnsusCommitImplementation.extendsFrom testImplementation
    integrationTestTwoPhaseConsesnsusCommitRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestTwoPhaseConsesnsusCommitCompileOnly.extendsFrom testCompileOnly
}

dependencies {
    implementation project(':rpc')
    implementation group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
    implementation group: 'com.google.inject', name: 'guice', version: "${guiceVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    implementation group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: "${cassandraDriverVersion}"
    implementation group: 'com.azure', name: 'azure-cosmos', version: "${azureCosmosVersion}"
    implementation group: 'org.jooq', name: 'jooq', version: "${jooqVersion}"
    implementation group: 'software.amazon.awssdk', name: 'applicationautoscaling', version: "${awssdkVersion}"
    implementation group: 'software.amazon.awssdk', name: 'dynamodb', version: "${awssdkVersion}"
    implementation group: 'software.amazon.awssdk', name: 'core', version: "${awssdkVersion}"
    implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: "${commonsDbcp2Version}"
    implementation group: 'mysql', name: 'mysql-connector-java', version: "${mysqlDriverVersion}"
    implementation group: 'org.postgresql', name: 'postgresql', version: "${postgresqlDriverVersion}"
    implementation group: 'com.oracle.database.jdbc', name: 'ojdbc8-production', version: "${oracleDriverVersion}"
    implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: "${sqlserverDriverVersion}"
    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: "${mockitoVersion}"
    // for SpotBugs
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: "${spotbugsVersion}"
    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "Scalar DB"
}

task integrationTestCassandra(type: Test) {
    description = 'Runs the integration tests for Cassandra.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCassandra.output.classesDirs
    classpath = sourceSets.integrationTestCassandra.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
}

task integrationTestCosmos(type: Test) {
    description = 'Runs the integration tests for Cosmos DB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCosmos.output.classesDirs
    classpath = sourceSets.integrationTestCosmos.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestDynamo(type: Test) {
    description = 'Runs the integration tests for DynamoDB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestDynamo.output.classesDirs
    classpath = sourceSets.integrationTestDynamo.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestJdbc(type: Test) {
    description = 'Runs the integration tests for a JDBC database.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestJdbc.output.classesDirs
    classpath = sourceSets.integrationTestJdbc.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties())
    }
}

task integrationTestMultiStorage(type: Test) {
    description = 'Runs the integration tests for multi-storage.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestMultiStorage.output.classesDirs
    classpath = sourceSets.integrationTestMultiStorage.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
}

task integrationTestTwoPhaseConsesnsusCommit(type: Test) {
    description = 'Runs the integration tests for two-phase consensus commit.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestTwoPhaseConsesnsusCommit.output.classesDirs
    classpath = sourceSets.integrationTestTwoPhaseConsesnsusCommit.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
}

task copyDependencies(type: Copy) {
    configurations.api.canBeResolved true
    configurations.implementation.canBeResolved true
    from(configurations.api + configurations.implementation)
    into file("$buildDir/libs")
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}

import com.github.spotbugs.snom.SpotBugsTask

task spotbugsMain(type: SpotBugsTask) {
    dependsOn 'classes'
    classDirs = sourceSets.main.output
    sourceDirs = sourceSets.main.allSource.sourceDirectories
    auxClassPaths = sourceSets.main.compileClasspath
    reports { html.enabled = true }
}

task spotbugsTest(type: SpotBugsTask) {
    dependsOn 'testClasses'
    classDirs = sourceSets.test.output
    sourceDirs = sourceSets.test.allSource.sourceDirectories
    auxClassPaths = sourceSets.test.compileClasspath
    reports { html.enabled = true }
}

task spotbugsIntegrationTest(type: SpotBugsTask) {
    dependsOn 'integrationTestAllClasses'
    classDirs = sourceSets.integrationTestAll.output
    sourceDirs = sourceSets.integrationTestAll.allSource.sourceDirectories
    auxClassPaths = sourceSets.integrationTestAll.compileClasspath
    reports { html.enabled = true }
}

check.dependsOn += spotbugsMain
check.dependsOn += spotbugsTest
check.dependsOn += spotbugsIntegrationTest

archivesBaseName = "scalardb"

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
        (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
                project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
