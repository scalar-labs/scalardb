plugins {
    id 'com.github.spotbugs-base' version "${spotbugsPluginVersion}"
    id 'net.ltgt.errorprone' version "${errorpronePluginVersion}"
    id 'maven-publish'
    id 'base'
}

sourceSets {
    integrationTestAll {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCassandra {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/cassandra/*.java'
            exclude '**/com/scalar/db/storage/cassandra/CassandraPermissionTestUtils.java'
            exclude '**/com/scalar/db/storage/cassandra/CassandraPermissionIntegrationTest.java'
            exclude '**/com/scalar/db/storage/cassandra/CassandraAdminPermissionIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCosmos {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/cosmos/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestDynamo {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/dynamo/*.java'
            exclude '**/com/scalar/db/storage/dynamo/DynamoPermissionTestUtils.java'
            exclude '**/com/scalar/db/storage/dynamo/DynamoPermissionIntegrationTest.java'
            exclude '**/com/scalar/db/storage/dynamo/DynamoAdminPermissionIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestJdbc {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/jdbc/*.java'
            include '**/com/scalar/db/transaction/jdbc/*.java'
            exclude '**/com/scalar/db/storage/jdbc/JdbcPermissionTestUtils.java'
            exclude '**/com/scalar/db/storage/jdbc/JdbcPermissionIntegrationTest.java'
            exclude '**/com/scalar/db/storage/jdbc/JdbcAdminPermissionIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestMultiStorage {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/jdbc/JdbcTestUtils.java'
            include '**/com/scalar/db/storage/multistorage/*.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestCassandraPermission {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/cassandra/CassandraPermissionTestUtils.java'
            include '**/com/scalar/db/storage/cassandra/CassandraAdminTestUtils.java'
            include '**/com/scalar/db/storage/cassandra/CassandraEnv.java'
            include '**/com/scalar/db/storage/cassandra/CassandraPermissionIntegrationTest.java'
            include '**/com/scalar/db/storage/cassandra/CassandraAdminPermissionIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestDynamoPermission {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/dynamo/DynamoPermissionTestUtils.java'
            include '**/com/scalar/db/storage/dynamo/DynamoAdminTestUtils.java'
            include '**/com/scalar/db/storage/dynamo/DynamoEnv.java'
            include '**/com/scalar/db/storage/dynamo/DynamoPermissionIntegrationTest.java'
            include '**/com/scalar/db/storage/dynamo/DynamoAdminPermissionIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
    integrationTestJdbcPermission {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
            include '**/com/scalar/db/common/*.java'
            include '**/com/scalar/db/storage/jdbc/JdbcPermissionTestUtils.java'
            include '**/com/scalar/db/storage/jdbc/JdbcAdminTestUtils.java'
            include '**/com/scalar/db/storage/jdbc/JdbcTestUtils.java'
            include '**/com/scalar/db/storage/jdbc/JdbcEnv.java'
            include '**/com/scalar/db/storage/jdbc/JdbcPermissionIntegrationTest.java'
            include '**/com/scalar/db/storage/jdbc/JdbcAdminPermissionIntegrationTest.java'
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestAllImplementation.extendsFrom testImplementation
    integrationTestAllRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestAllCompileOnly.extendsFrom testCompileOnly
    integrationTestCassandraImplementation.extendsFrom testImplementation
    integrationTestCassandraRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCassandraCompileOnly.extendsFrom testCompileOnly
    integrationTestCosmosImplementation.extendsFrom testImplementation
    integrationTestCosmosRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCosmosCompileOnly.extendsFrom testCompileOnly
    integrationTestDynamoImplementation.extendsFrom testImplementation
    integrationTestDynamoRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestDynamoCompileOnly.extendsFrom testCompileOnly
    integrationTestJdbcImplementation.extendsFrom testImplementation
    integrationTestJdbcRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestJdbcCompileOnly.extendsFrom testCompileOnly
    integrationTestMultiStorageImplementation.extendsFrom testImplementation
    integrationTestMultiStorageRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestMultiStorageCompileOnly.extendsFrom testCompileOnly
    integrationTestCassandraPermissionImplementation.extendsFrom testImplementation
    integrationTestCassandraPermissionRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCassandraPermissionCompileOnly.extendsFrom testCompileOnly
    integrationTestDynamoPermissionImplementation.extendsFrom testImplementation
    integrationTestDynamoPermissionRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestDynamoPermissionCompileOnly.extendsFrom testCompileOnly
    integrationTestJdbcPermissionImplementation.extendsFrom testImplementation
    integrationTestJdbcPermissionRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestJdbcPermissionCompileOnly.extendsFrom testCompileOnly
}

dependencies {
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.google.inject:guice:${guiceVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "com.datastax.cassandra:cassandra-driver-core:${cassandraDriverVersion}"
    implementation "com.azure:azure-cosmos:${azureCosmosVersion}"
    implementation "org.jooq:jooq:${jooqVersion}"
    implementation platform("software.amazon.awssdk:bom:${awssdkVersion}")
    implementation 'software.amazon.awssdk:applicationautoscaling'
    implementation 'software.amazon.awssdk:dynamodb'
    testImplementation 'software.amazon.awssdk:iam'
    testImplementation 'software.amazon.awssdk:iam-policy-builder'
    implementation "org.apache.commons:commons-dbcp2:${commonsDbcp2Version}"
    implementation "com.mysql:mysql-connector-j:${mysqlDriverVersion}"
    implementation "org.postgresql:postgresql:${postgresqlDriverVersion}"
    implementation "com.oracle.database.jdbc:ojdbc8:${oracleDriverVersion}"
    implementation "com.microsoft.sqlserver:mssql-jdbc:${sqlserverDriverVersion}"
    implementation "org.xerial:sqlite-jdbc:${sqliteDriverVersion}"
    implementation "com.yugabyte:jdbc-yugabytedb:${yugabyteDriverVersion}"
    implementation "com.ibm.db2:jcc:${db2DriverVersion}"
    implementation ("org.mariadb.jdbc:mariadb-java-client:${mariadDbDriverVersion}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation "org.apache.commons:commons-text:${commonsTextVersion}"
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation "com.github.stefanbirkner:system-lambda:${stefanbirknerSystemLambdaVersion}"
    testImplementation project(':integration-test')

    // for SpotBugs
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"

    // for Error Prone
    errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    errorproneJavac "com.google.errorprone:javac:${errorproneJavacVersion}"
}

javadoc {
    title = "ScalarDB"
}

task integrationTestCassandra(type: Test) {
    description = 'Runs the integration tests for Cassandra.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCassandra.output.classesDirs
    classpath = sourceSets.integrationTestCassandra.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll{it.key.toString().startsWith("scalardb")})
    }
}

task integrationTestCosmos(type: Test) {
    description = 'Runs the integration tests for Cosmos DB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCosmos.output.classesDirs
    classpath = sourceSets.integrationTestCosmos.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll{it.key.toString().startsWith("scalardb")})
    }
    jvmArgs '-XX:MaxDirectMemorySize=4g', '-Xmx6g',
            // INFO com.azure.cosmos.implementation.RxDocumentClientImpl - Initializing DocumentClient [3] with serviceEndpoint [https://localhost:8081/], ...
            '-Dorg.slf4j.simpleLogger.log.com.azure.cosmos.implementation.RxDocumentClientImpl=warn',
            // INFO com.azure.cosmos.implementation.Configs - AZURE_COSMOS_DISABLE_NON_STREAMING_ORDER_BY property is: null
            '-Dorg.slf4j.simpleLogger.log.com.azure.cosmos.implementation.Configs=warn',
            // ERROR com.scalar.db.storage.cosmos.MutateStatementHandler - {"innerErrorMessage":"[\"Encountered exception while executing Javascript. Exception = Error: no mutation...
            '-Dorg.slf4j.simpleLogger.log.com.scalar.db.storage.cosmos.MutateStatementHandler=off'
}

task integrationTestDynamo(type: Test) {
    description = 'Runs the integration tests for DynamoDB.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestDynamo.output.classesDirs
    classpath = sourceSets.integrationTestDynamo.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll{it.key.toString().startsWith("scalardb")})
    }
    maxParallelForks = 10
}

task integrationTestJdbc(type: Test) {
    description = 'Runs the integration tests for a JDBC database.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestJdbc.output.classesDirs
    classpath = sourceSets.integrationTestJdbc.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll{it.key.toString().startsWith("scalardb")})
    }
}

task integrationTestMultiStorage(type: Test) {
    description = 'Runs the integration tests for multi-storage.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestMultiStorage.output.classesDirs
    classpath = sourceSets.integrationTestMultiStorage.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll{it.key.toString().startsWith("scalardb")})
    }
}

task integrationTestCassandraPermission(type: Test) {
    description = 'Runs the integration tests for Cassandra permissions.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestCassandraPermission.output.classesDirs
    classpath = sourceSets.integrationTestCassandraPermission.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll { it.key.toString().startsWith("scalardb") })
    }
}

task integrationTestDynamoPermission(type: Test) {
    description = 'Runs the integration tests for DynamoDB permissions.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestDynamoPermission.output.classesDirs
    classpath = sourceSets.integrationTestDynamoPermission.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll { it.key.toString().startsWith("scalardb") })
    }
}

task integrationTestJdbcPermission(type: Test) {
    description = 'Runs the integration tests for JDBC permissions.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTestJdbcPermission.output.classesDirs
    classpath = sourceSets.integrationTestJdbcPermission.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    options {
        systemProperties(System.getProperties().findAll { it.key.toString().startsWith("scalardb") })
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat(googleJavaFormatVersion)
    }
}

import com.github.spotbugs.snom.SpotBugsTask

task spotbugsMain(type: SpotBugsTask) {
    dependsOn 'classes'
    classDirs = sourceSets.main.output
    sourceDirs = sourceSets.main.allSource.sourceDirectories
    auxClassPaths = sourceSets.main.compileClasspath
    reports { html.enabled = true }
    excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")
}

task spotbugsTest(type: SpotBugsTask) {
    dependsOn 'testClasses'
    classDirs = sourceSets.test.output
    sourceDirs = sourceSets.test.allSource.sourceDirectories
    auxClassPaths = sourceSets.test.compileClasspath
    reports { html.enabled = true }
    excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")
}

task spotbugsIntegrationTest(type: SpotBugsTask) {
    dependsOn 'integrationTestAllClasses'
    classDirs = sourceSets.integrationTestAll.output
    sourceDirs = sourceSets.integrationTestAll.allSource.sourceDirectories
    auxClassPaths = sourceSets.integrationTestAll.compileClasspath
    reports { html.enabled = true }
    excludeFilter = file("${project.rootDir}/gradle/spotbugs-exclude.xml")
}

check.dependsOn += spotbugsMain
check.dependsOn += spotbugsTest
check.dependsOn += spotbugsIntegrationTest

base {
    archivesName = "scalardb"
}

// for archiving and uploading to maven central
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'scalardb'
            from components.java
            pom {
                name = 'ScalarDB'
                description = 'A universal transaction manager that achieves database-agnostic transactions and distributed transactions that span multiple databases'
                url = 'https://github.com/scalar-labs/scalardb'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'hiroyuki'
                        name = 'Hiroyuki Yamada'
                        email = 'hiroyuki.yamada@scalar-labs.com'
                    }
                    developer {
                        id = 'brfrn169'
                        name = 'Toshihiro Suzuki'
                        email = 'brfrn169@gmail.com'
                    }
                    developer {
                        id = 'Torch3333'
                        name = 'Vincent Guilpain'
                        email = 'vincent.guilpain@scalar-labs.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/scalar-labs/scalardb.git'
                    developerConnection = 'scm:git:https://github.com/scalar-labs/scalardb.git'
                    url = 'https://github.com/scalar-labs/scalardb'
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}
