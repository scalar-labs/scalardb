syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.scalar.db.rpc";
option java_outer_classname = "ScalarDbProto";

package rpc;

import "google/protobuf/empty.proto";

// Common

message Value {
  string name = 1;
  message TextValue {
    optional string value = 1;
  }
  message BlobValue {
    optional bytes value = 1;
  }
  oneof value {
    bool boolean_value = 2;
    int32 int_value = 3;
    int64 bigint_value = 4;
    float float_value = 5;
    double double_value = 6;
    TextValue text_value = 7;
    BlobValue blob_value = 8;
  }
}

message Key {
  repeated Value value = 1;
}

enum Consistency {
  CONSISTENCY_SEQUENTIAL = 0;
  CONSISTENCY_EVENTUAL = 1;
  CONSISTENCY_LINEARIZABLE = 2;
}

message Get {
  string namespace = 1;
  string table = 2;
  Key partition_key = 3;
  Key clustering_key = 4;
  Consistency consistency = 5;
  repeated string projection = 6;
}

enum Order {
  ORDER_ASC = 0;
  ORDER_DESC = 1;
}

message Ordering {
  string name = 1;
  Order order = 2;
}

message Scan {
  string namespace = 1;
  string table = 2;
  Key partition_key = 3;
  Consistency consistency = 4;
  repeated string projection = 5;
  Key start_clustering_key = 6;
  bool start_inclusive = 7;
  Key end_clustering_key = 8;
  bool end_inclusive = 9;
  repeated Ordering ordering = 10;
  int32 limit = 11;
}

message ConditionalExpression {
  string name = 1;
  Value value = 2;
  enum Operator {
    EQ = 0;
    NE = 1;
    GT = 2;
    GTE = 3;
    LT = 4;
    LTE = 5;
  }
  Operator operator = 3;
}

message MutateCondition {
  enum Type {
    PUT_IF = 0;
    PUT_IF_EXISTS = 1;
    PUT_IF_NOT_EXISTS = 2;
    DELETE_IF = 3;
    DELETE_IF_EXISTS = 4;
  }
  Type type = 1;
  repeated ConditionalExpression expression = 2;
}

message Mutation {
  string namespace = 1;
  string table = 2;
  Key partition_key = 3;
  Key clustering_key = 4;
  Consistency consistency = 5;
  MutateCondition condition = 6;
  enum Type {
    PUT = 0;
    DELETE = 1;
  }
  Type type = 7;
  repeated Value value = 8; // only for Put operations
}

message Result {
  repeated Value value = 1;
}

// DistributedStorage

service DistributedStorage {
  rpc Get(GetRequest) returns (GetResponse) {
  }
  rpc Scan(stream ScanRequest) returns (stream ScanResponse) {
  }
  rpc Mutate(MutateRequest) returns (google.protobuf.Empty) {
  }
}

message GetRequest {
  Get get = 1;
}

message GetResponse {
  Result result = 1;
}

message ScanRequest {
  Scan scan = 1;
  optional int32 fetch_count = 2;
}

message ScanResponse {
  repeated Result result = 2;
  bool has_more_results = 3;
}

message MutateRequest {
  repeated Mutation mutation = 1;
}

// DistributedStorageAdmin

service DistributedStorageAdmin {
  rpc CreateNamespace(CreateNamespaceRequest) returns (google.protobuf.Empty) {
  }
  rpc DropNamespace(DropNamespaceRequest) returns (google.protobuf.Empty) {
  }
  rpc CreateTable(CreateTableRequest) returns (google.protobuf.Empty) {
  }
  rpc DropTable(DropTableRequest) returns (google.protobuf.Empty) {
  }
  rpc TruncateTable(TruncateTableRequest) returns (google.protobuf.Empty) {
  }
  rpc GetTableMetadata(GetTableMetadataRequest) returns (GetTableMetadataResponse) {
  }
  rpc GetNamespaceTableNames(GetNamespaceTableNamesRequest) returns (GetNamespaceTableNamesResponse) {
  }
  rpc NamespaceExists(NamespaceExistsRequest) returns (NamespaceExistsResponse) {
  }
}

enum DataType {
  DATA_TYPE_BOOLEAN = 0;
  DATA_TYPE_INT = 1;
  DATA_TYPE_BIGINT = 2;
  DATA_TYPE_FLOAT = 3;
  DATA_TYPE_DOUBLE = 4;
  DATA_TYPE_TEXT = 5;
  DATA_TYPE_BLOB = 6;
}

message TableMetadata {
  map<string, DataType> column = 1;
  repeated string partition_key_name = 2;
  repeated string clustering_key_name = 3;
  map<string, Order> clustering_order = 4;
  repeated string secondary_index_name = 5;
}

message CreateNamespaceRequest {
  string namespace = 1;
  map<string, string> options = 2;
  bool if_not_exists = 3;
}

message DropNamespaceRequest {
  string namespace = 1;
}

message CreateTableRequest {
  string namespace = 1;
  string table = 2;
  TableMetadata table_metadata = 3;
  map<string, string> options = 4;
  bool if_not_exists = 5;
}

message DropTableRequest {
  string namespace = 1;
  string table = 2;
}

message TruncateTableRequest {
  string namespace = 1;
  string table = 2;
}

message GetTableMetadataRequest {
  string namespace = 1;
  string table = 2;
}

message GetTableMetadataResponse {
  TableMetadata table_metadata = 1;
}

message GetNamespaceTableNamesRequest {
  string namespace = 1;
}

message GetNamespaceTableNamesResponse {
  repeated string table_name = 1;
}

message NamespaceExistsRequest {
  string namespace = 1;
}

message NamespaceExistsResponse {
  bool exists = 1;
}

// DistributedTransaction

service DistributedTransaction {
  rpc Transaction(stream TransactionRequest) returns (stream TransactionResponse) {
  }
  rpc GetState(GetTransactionStateRequest) returns (GetTransactionStateResponse) {
  }
  rpc Abort(AbortRequest) returns (AbortResponse) {
  }
}

message TransactionRequest {
  message StartRequest {
    optional string transaction_id = 1;
  }

  message GetRequest {
    Get get = 2;
  }

  message ScanRequest {
    Scan scan = 2;
  }

  message MutateRequest {
    repeated Mutation mutation = 2;
  }

  message CommitRequest {
  }

  message AbortRequest {
  }

  oneof request {
    StartRequest start_request = 1;
    GetRequest get_request = 2;
    ScanRequest scan_request = 3;
    MutateRequest mutate_request = 4;
    CommitRequest commit_request = 5;
    AbortRequest abort_request = 6;
  }
}

message TransactionResponse {
  message StartResponse {
    string transaction_id = 1;
  }

  message GetResponse {
    Result result = 1;
  }

  message ScanResponse {
    repeated Result result = 1;
  }

  message Error {
    enum ErrorCode {
      INVALID_ARGUMENT = 0;
      CONFLICT = 1;
      UNKNOWN_TRANSACTION = 2;
      OTHER = 3;
    }
    ErrorCode error_code = 1;
    string message = 2;
  }

  oneof response {
    StartResponse start_response = 1;
    GetResponse get_response = 2;
    ScanResponse scan_response = 3;
    Error error = 4;
  }
}

enum TransactionState {
  TRANSACTION_STATE_COMMITTED = 0;
  TRANSACTION_STATE_ABORTED = 1;
  TRANSACTION_STATE_UNKNOWN = 2;
}

message GetTransactionStateRequest {
  string transaction_id = 1;
}

message GetTransactionStateResponse {
  TransactionState state = 1;
}

message AbortRequest {
  string transaction_id = 1;
}

message AbortResponse {
  TransactionState state = 1;
}

// TwoPhaseCommitTransaction

service TwoPhaseCommitTransaction {
  rpc TwoPhaseCommitTransaction(stream TwoPhaseCommitTransactionRequest) returns (stream TwoPhaseCommitTransactionResponse) {
  }
  rpc GetState(GetTransactionStateRequest) returns (GetTransactionStateResponse) {
  }
  rpc Abort(AbortRequest) returns (AbortResponse) {
  }
}

message TwoPhaseCommitTransactionRequest {
  message StartRequest {
    optional string transaction_id = 1;
  }

  message JoinRequest {
    string transaction_id = 1;
  }

  message GetRequest {
    Get get = 2;
  }

  message ScanRequest {
    Scan scan = 2;
  }

  message MutateRequest {
    repeated Mutation mutation = 2;
  }

  message PrepareRequest {
  }

  message ValidateRequest {
  }

  message CommitRequest {
  }

  message RollbackRequest {
  }

  oneof request {
    StartRequest start_request = 1;
    JoinRequest join_request = 2;
    GetRequest get_request = 3;
    ScanRequest scan_request = 4;
    MutateRequest mutate_request = 5;
    PrepareRequest prepare_request = 6;
    ValidateRequest validate_request = 7;
    CommitRequest commit_request = 8;
    RollbackRequest rollback_request = 9;
  }
}

message TwoPhaseCommitTransactionResponse {
  message StartResponse {
    string transaction_id = 1;
  }

  message GetResponse {
    Result result = 1;
  }

  message ScanResponse {
    repeated Result result = 1;
  }

  message Error {
    enum ErrorCode {
      INVALID_ARGUMENT = 0;
      CONFLICT = 1;
      UNKNOWN_TRANSACTION = 2;
      OTHER = 3;
    }
    ErrorCode error_code = 1;
    string message = 2;
  }

  oneof response {
    StartResponse start_response = 1;
    GetResponse get_response = 2;
    ScanResponse scan_response = 3;
    Error error = 4;
  }
}
